buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'http://repo.spring.io/plugins-release' }
		jcenter()
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/libs-milestone' }
		maven { url 'https://repo.spring.io/plugins-snapshot' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.7")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'

group = 'com.kugmax.learn'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	maven { url 'https://plugins.gradle.org/m2/' }
	maven { url 'http://repo.spring.io/plugins-release' }
	jcenter()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/libs-milestone' }
	maven { url 'https://repo.spring.io/plugins-snapshot' }
}


dependencies {
	implementation "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
	implementation "io.github.lognet:grpc-spring-boot-starter:${springBootStarterVersion}"
	implementation "com.salesforce.servicelibs:reactor-grpc-stub:${reactiveGrpcVersion}"

	compile group: 'org.springframework.data', name: 'spring-data-r2dbc', version: '1.0.0.M1'

	implementation "io.r2dbc:r2dbc-postgresql:1.0.0.M7"
	implementation "io.r2dbc:r2dbc-spi:1.0.0.M7"

	implementation "org.projectlombok:lombok:${lombokVersion}"

	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

sourceSets {
	main {
		proto {
			srcDir file("${projectDir}/src/main/proto")
			include "**/*.proto"
		}
		java {
			srcDirs "src/main/java"
		}
	}

	test {
		java {
			srcDirs "src/test/java"
		}

	}
}

task cleanProtoGen {
	delete "${projectDir}/src/main/java/generated"
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protocVersion}"
	}

	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
		reactor {
			artifact = "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}:jdk8@jar"
		}
	}

	generateProtoTasks.generatedFilesBaseDir = "${projectDir}/src/main/java/generated"

	generateProtoTasks {

		all().each { task ->
			task.plugins {
				grpc {}
				reactor {}
			}
		}
	}
}
